1. Введение
1.1.	Обоснование выбора темы
1.2. Цели и задачи проекта
1.3. Актуальность исследования
2. Обзор литературы
Обзор существующих решений в области веб-приложений для зубных клиник
Анализ технологий: Vue.js, Google Maps API, Firebase
3. Техническое задание
Описание функциональности веб-приложения
Определение требований к пользовательскому интерфейсу
4. Архитектура приложения
Использование фреймворка Vue.js
Компонентная структура приложения
5. Разработка пользовательского интерфейса
Использование Vue компонентов для создания интерфейса
Интерактивные элементы для записи на прием и просмотра расписания
Интеграция Google Maps для отображения расположения зубных клиник
6. База данных и хранение данных
Использование Firebase для хранения данных о клиниках
Работа с реальным временем для обновления расписания и доступности записей
7. Авторизация и безопасность
Реализация системы авторизации с использованием Firebase Authentication
Обеспечение безопасности данных пользователей
8. Тестирование
План тестирования функциональности приложения
Использование автоматического и ручного тестирования
9. Заключение
Сводка выполненной работы
Результаты и достижения проекта
10. Перспективы развития
Возможные улучшения и расширения функционала приложения
11. Список использованных источников
12. Приложения
Исходный код приложения
Скриншоты и демонстрации интерфейса
























Введение 
Бережное отношение к нашему здоровью это путь к полноценной жизни. Очень важно сохранить его и не сокрушаться в будущем. Необходимо закладывать привычку заботиться о себе с самого детства. Как много маленьких пациентов не хотят идти к врачу, не хотят сдавать анализы или со слезами делают уколы и прививки. А поход к зубному врачу для многих детей и родителей это испытание.
В хорошем приложении должны быть такие неотъемлемые части как:
1. удобство записи к врачам и отмены посещения. Возможностью самостоятельного выбора способа напоминания о предстоящем визите (по смс, по эл. Почте, на вотсап или в телеграмм)
3. отзывы о клинике и врачах

В современном мире информационных технологий здравоохранение играет ключевую роль в обеспечении качественного и доступного медицинского обслуживания. В этом контексте, разработка современного веб-приложения для стоматологической клиники представляет собой актуальную задачу, направленную на оптимизацию процессов в медицинской сфере.

Важность 
Разработка такого приложения позволит существенно улучшить качество обслуживания пациентов, уменьшить временные затраты на административные процессы и повысить эффективность работы медицинского персонала. Важной составляющей данного проекта является создание удобного и интуитивно понятного интерфейса, способствующего максимальному комфорту как для пациентов, так и для сотрудников клиники. 
Возможности
 В рамках данного дипломного проекта планируется использование современных технологий в сфере фронтенд-разработки. Применение HTML и SCSS позволит создать высококачественный и адаптивный пользовательский интерфейс, а фреймворк Vue.js обеспечит плавную и динамичную работу приложения, что существенно повысит его функциональность и привлекательность для пользователей. Объединение этих технологий позволит создать мощный инструмент для управления информацией в стоматологической клинике, что в свою очередь приведет к повышению качества медицинских услуг и улучшению общего опыта взаимодействия с клиентами.
 Актуальность 
С каждым годом уровень цифровизации во всех областях возрастает, и важность внедрения современных информационных технологий становится все более очевидной. Веб-приложение для стоматологической клиники открывает новые перспективы в управлении данными пациентов, организации записи на прием и обеспечении комфортного взаимодействия между персоналом клиники и пациентами. 
Важность фронтенда.
 Фронтенд - это лицо любого веб-приложения, интерфейс, через который пользователи взаимодействуют с системой. Он играет решающую роль в формировании первого впечатления от приложения, а также в том, насколько удобно и эффективно пользователи смогут взаимодействовать с функционалом. 
Виды веб-приложений 
SPA (Single Page Application) — одностраничное интерактивное приложение, которое не требует перезагрузки основной страницы во время своей работы. В отличие от традиционных веб-приложений, они работают быстрее, так как вся логика приложения реализуется в браузере, а не на сервере.

Плюсы:

Удобный интерфейс. Пользователю проще ориентироваться на одной странице, когда есть только один вариант движения — вниз. Никакие дополнительные ссылки не отвлекут его внимание и не позволят запутаться внутри программы.

Высокая скорость. Во время работы, приложение не обновляет всю страницу, а лишь подгружает нужный пользователю контент. Поэтому, оно работает гораздо быстрее многостраничных сайтов — запрос на сервер делается один раз, после чего информация на странице просто дополняется.

Кэширование данных. Точно также работает и кэш — достаточного обратиться к серверу один раз и он сохранит все данные пользователя. Теперь клиент сможет работать в приложении даже в автономном режиме.

Минусы:

Недостаточная SEO-оптимизация. У одностраничных приложений всего один URL-адрес, который не меняется в процессе работы, в отличие от многостраничников. Поэтому разработчик может привязать к ней только один поисковый запрос. Такие сайты трудно оптимизировать под поисковые системы из-за того, что дополнительно подгруженную информацию поисковый бот просто не найдет.

Плохая безопасность. Одностраничные приложения больше подвержены атаке хакеров, которые крадут данные пользователей, с помощью межсайтовых сценариев. Они внедряют их со стороны клиента и легко могут получить конфиденциальную информацию. У MPA и PWA, которые мы рассмотрим ниже, безопасность настроена гораздо лучше.

MPA (Multi Page Application) — многостраничное веб-приложение. Оно позволяет пользователю переходить между отдельными страницами при совершении запроса. У таких ресурсов, как правило, более сложный интерфейс и большое количество дополнительных ссылок. При каждом новом запросе, например, при оплате продукта, у пользователя откроется новая страница.

Плюсы:

Отличное SEO. В отличие от SPA, у MPA каждая страница имеет свой URL-адрес, что дает возможность отлично контролировать SEO-запросы пользователей — на каждую из них, разработчик может добавить свой уникальный ключ и метатеги.

Неограниченная масштабируемость. MPA не ограничивает вас по количеству создания страниц и информации, которую нужно на ней разместить. В отличие от SPA, тут можно использовать множество функций на одной странице. Поэтому, если ваша задача — больше возможностей для клиента, выбирайте MPA.

Минусы:

Низкая скорость. При каждом взаимодействии с приложением, сервер перезагружает и обновляет все ресурсы — HTML, CSS, скрипты и все данные страницы. Поэтому скорость ожидания ответа на запрос, увеличивается, что негативно может повлиять на производительность приложения.

Более сложная разработка. При создании такого приложения, требуется полноценная разработка серверной и фронтальной части программы и использование фреймворков для внешнего и внутреннего интерфейса. Все это занимает гораздо больше времени, в сравнении с созданием SPA.

Как сделать сайт более быстрым. Для создания быстрого веб-приложения, следует учитывать ряд основополагающих принципов и применять оптимизационные техники: Оптимизация изображений и мультимедийных файлов: Используйте сжатие изображений и видео без потери качества. Избегайте загрузки изображений большого разрешения, если они не требуются в таком формате. Ленивая загрузка контента: Загружайте контент только когда он необходим пользователю. Например, изображения за пределами видимой области могут загружаться только при прокрутке. Минимизация HTTP-запросов: Объединяйте файлы CSS и JavaScript, чтобы сократить количество запросов к серверу. Используйте CSS-спрайты для сокращения числа запросов к изображениям. Кеширование ресурсов: Используйте HTTP-кэширование для временного хранения ресурсов на стороне клиента. Это позволяет браузеру использовать ранее загруженные данные вместо их повторной загрузки. Минимизация и объединение CSS и JavaScript файлов: Удалите избыточные пробелы, комментарии и лишние символы из файлов. Объедините несколько файлов в один, чтобы уменьшить количество запросов. Использование CDN (Content Delivery Network): Используйте сети доставки контента для хранения и распространения ресурсов (например, библиотек JavaScript, стилей) на сервера распределенные по всему миру. Это ускорит загрузку ресурсов. Оптимизация серверной части: Поддерживайте эффективный хостинг, используйте кэширование на сервере, уменьшите время обработки запросов. Использование асинхронных запросов: Используйте асинхронные запросы для загрузки данных и контента на страницу, чтобы не блокировать остальной контент во время загрузки. Использование шрифтов локально: Если используются веб-шрифты, предпочтительно загружать их с сервера вместо подключения через сторонние сервисы, что может привести к дополнительной задержке. Регулярные тесты и анализ производительности: Регулярно тестируйте производительность своего приложения с помощью инструментов, таких как Google PageSpeed Insights, и исправляйте выявленные узкие места. Использование сжатия GZIP/Deflate: Настройте сервер так, чтобы он отправлял данные сжатыми, что уменьшит объем передаваемой информации. Оптимизация базы данных: Оптимизируйте запросы к базе данных и используйте индексы для ускорения поиска данных. Соблюдение этих принципов и техник поможет создать быстрое и отзывчивое веб-приложение для стоматологической клиники, что повысит удовлетворенность пользователей и эффективность работы персонала.
Выбор технологии для разработки веб-приложения - важное решение, которое может существенно повлиять на процесс разработки и долгосрочную поддержку проекта. Вот несколько причин, почему Vue.js может быть отличным выбором для проекта по созданию веб-приложения для зубной клиники:

Простота Использования и Обучения:

Vue.js обладает интуитивно понятным и легким синтаксисом, что делает его прекрасным выбором для начинающих разработчиков и упрощает процесс обучения.
Гибкость и Масштабируемость:

Vue.js легко интегрируется с другими библиотеками и инструментами. Он предоставляет гибкую структуру компонентов, что облегчает масштабирование приложения с ростом его функциональности.
Активное Сообщество и Экосистема:

Vue.js имеет большое активное сообщество разработчиков. Это означает, что вы можете легко найти ресурсы, документацию и поддержку. Богатая экосистема библиотек и плагинов также облегчает интеграцию дополнительных функций.
Производительность:

Vue.js предоставляет эффективный механизм обнаружения изменений (реактивность), что позволяет оптимизировать производительность приложения и предотвращать ненужные обновления интерфейса.
Инструменты для Разработчиков:

В экосистеме Vue.js есть множество инструментов для разработки, таких как Vue DevTools, которые облегчают отладку и профилирование приложения.
Использование Компонентов:

Vue.js построен вокруг концепции компонентов, что облегчает структурирование кода и позволяет повторно использовать компоненты в различных частях приложения.
Интеграция с Google Maps и Firebase:

Vue.js легко интегрируется с сторонними библиотеками и сервисами. Использование Google Maps API и Firebase с Vue.js может быть реализовано с минимальными усилиями.
Поддержка Одностраничных Приложений (SPA):

Vue.js идеально подходит для создания одностраничных приложений, что является частым требованием для современных веб-приложений.
Активная Разработка и Обратная Совместимость:

Vue.js активно разрабатывается, и команда поддерживает обратную совместимость, что обеспечивает долгосрочную поддержку и развитие фреймворка.
Эффективная Работа с DOM:

Vue.js обеспечивает эффективную работу с DOM, что способствует быстрой отрисовке интерфейса и обеспечивает плавное взаимодействие с приложением.
Выбор Vue.js обосновывается его простотой использования, гибкостью, производительностью и богатой экосистемой, что делает его привлекательным фреймворком для разработки веб-приложений.

Vue Router представляет собой официальную библиотеку для управления маршрутизацией в приложениях Vue.js. Она позволяет создавать одностраничные приложения (SPA) и управлять навигацией между разными views/pages или компонентами веб-приложения. Вот несколько ключевых аспектов и возможностей Vue Router, которые могут быть полезными при разработке веб-приложения для зубной клиники:
1.	Декларативная Навигация:
Vue Router позволяет определять маршруты в декларативном стиле, что облегчает создание и поддержание маршрутизации в вашем приложении.
2.	Вложенные Маршруты и Представления:
Вы можете организовать маршруты в виде вложенных структур и связывать их с компонентами Vue, что обеспечивает логичное разделение функциональности.
3.	Динамические Маршруты:
Vue Router поддерживает динамические маршруты, что позволяет передавать параметры в адресной строке и обрабатывать их в компонентах.
4.	Режим Истории и Хеширования:
Vue Router поддерживает как режим истории (history mode), который убирает хэш из URL, так и режим хеширования (hash mode), что полезно при развертывании на статических хостингах. 
Режим истории использует API истории браузера для манипуляции URL без использования хэшей. В этом режиме URL выглядит более чистым и естественным, что может быть предпочтительным для пользователей. Однако, при использовании этого режима необходимо настроить сервер так, чтобы он корректно обрабатывал запросы к несуществующим маршрутам, чтобы избежать проблем с обновлением страницы. 
Режим хеширования добавляет метку (хеш) к URL после символа #. Хеш-фрагмент не отправляется на сервер, поэтому такие приложения легче развертывать на статических хостингах. Режим хеширования обеспечивает совместимость с браузерами, не поддерживающими режим истории. В отличие от динамических веб-сайтов, где контент формируется на сервере во время запроса пользователя, статические веб-сайты имеют заранее подготовленные файлы
5.	Параметры Запроса и Запись Состояния:
Вы можете передавать параметры запроса и использовать API записи состояния маршрута для управления состоянием приложения и обеспечения сохранения параметров после перезагрузки страницы. Vue Router позволяет передавать параметры в адресной строке URL, такие как: example.com/path?param1=value1&param2=value2. Эти параметры могут использоваться для передачи данных между маршрутами или для фильтрации и сортировки контента.

6.	Удобство Использования с Vue.js:
Поскольку Vue Router является официальной частью экосистемы Vue.js, его использование интегрировано с другими возможностями фреймворка, такими как система компонентов и управление состоянием.
7.	Совместимость с Vuex:
В случае использования Vuex для управления состоянием, Vue Router легко интегрируется с хранилищем, предоставляя средства для более сложных сценариев управления состоянием в вашем приложении.
Vue Router предоставляет возможность определять маршруты, которые соотносятся с определенными URL-адресами. Каждый маршрут связывается с определенным компонентом Vue, который отображается при переходе по данному URL.
Для интеграции Vue Router в проект необходимо выполнить следующие шаги:
1.	Установить библиотеку одной из команд: npm install vue-router или yarn add vue-router.
2.	Импорт и подключение Vue Router в main.js
 
3.	В папке router/index.js выполняется импорт роутера. В этом же файле  мы создаем переменную router, в которой будут храниться объекты – представляющие страницы приложения (с указанием адреса ссылки, названия страницы и связанного компонента).

 
4.	Для странички NotFound путь будет выглядеть так:
 
5.	Создаем компонент NavComp, который будет отвечать за переход по страничкам.
 
С помощью компонента router-link мы отображаем пользователю ссылку, cвойство to определяет URL для перехода, так же добавляем active-class, который будет отвечать за стилистику активной кнопки. Затем в главном компоненте App.vue подключаем компонент router- view, который отвечает за  отображение, соответствующего компонента.
Подключение стилей.
В своей работе я буду использовать препроцессоры,  с их помощью можно структурировать стили путем создания отдельных файлов с  переменными и миксинами и импорта их в главный файл стиля main.scss, который в свою очередь импортируется в main.js:
 
Так как у каждого компонента своя область видимости, чтобы использовать переменные  и миксины в отдельных компонентах необходимо сделать импорт файла с переменными  и миксинами в сам компонент.
 
@font-face – позволяет использовать свои собственные шрифты, не зависящие от наличия шрифтов на устройстве пользователя. Это полезно, когда нужно использовать специфические шрифты, которые не доступны по умолчанию. Рекомендуется предоставлять шрифты в нескольких форматах для лучшей поддержки различными браузерами. Форматы woff и woff2 часто используются для веба, так как обеспечивают хорошее сжатие и поддержку большинства современных браузеров. 
Структура.
Компоненты, отвечающие за страницы моего приложения будут храниться в отдельной папке views, в то же время, другие компоненты , которые могут быть частью отдельных страниц, будут храниться в папке components, что позволит сохранять порядок в структуре. Например, на странице «Наши врачи» в зависимости от того куда нажимает пользователь подгружаются разные компоненты, отвечающие за отображение информации о каждом докторе в отдельности.
 

Подключение API.

API, или интерфейсы программирования приложений, представляют собой набор средств и правил, которые позволяют программам взаимодействовать между собой. Они играют ключевую роль в современном программном обеспечении и веб-разработке по следующим причинам:
1.	Интеграция:
API позволяют различным программам и сервисам обмениваться данными и взаимодействовать друг с другом. Это особенно важно в мире, где существует множество разнообразных приложений и сервисов.
2.	Разделение Обязанностей:
Использование API позволяет разработчикам разделять функциональность программы на отдельные компоненты. Это способствует более четкому и легкому сопровождению кода, а также облегчает масштабирование приложения.
3.	Доступ к Сервисам и Данным:
API предоставляют стандартизированный способ получения доступа к сервисам и данным, предоставляемым сторонними провайдерами. Например, социальные сети предоставляют API для взаимодействия с их платформой, а картографические сервисы - для доступа к картам и геоданным.
4.	Разработка Клиент-Серверных Приложений:
API являются неотъемлемой частью клиент-серверной архитектуры. Они позволяют фронтенд-части (клиенту) и бэкенд-части (серверу) взаимодействовать, передавая данные и команды между ними.
5.	Микросервисная Архитектура:
В микросервисной архитектуре приложение строится как набор мелких сервисов, каждый из которых выполняет свою конкретную функцию. API играют ключевую роль в взаимодействии между этими сервисами.
6.	Разработка Мобильных Приложений:
При разработке мобильных приложений API позволяют приложениям взаимодействовать с серверами, получать данные, отправлять запросы, а также обмениваться информацией.
7.	Развитие Экосистемы Приложений:
Открытые API способствуют созданию экосистем приложений, когда сторонние разработчики могут создавать приложения, используя возможности и данные вашего сервиса.
8.	Инновации и Расширения:
API позволяют разработчикам интегрировать новые технологии и функциональность в свои приложения без необходимости изменения внутренней логики или архитектуры приложения.
Итак, API являются ключевым инструментом для создания гибких, расширяемых и взаимосвязанных приложений, а также обеспечивают возможность создания разнообразных и инновационных продуктов.
Асинхронные методы
Асинхронные методы в программировании используются для обработки задач, которые могут занимать время, без блокировки основного потока выполнения программы. Это позволяет эффективно управлять ресурсами и обеспечивать отзывчивость приложений в ситуациях, когда выполнение задачи может занять некоторое время, например:
1.	Сетевые запросы:
Отправка запросов к серверу для получения данных. Асинхронные методы позволяют приложению продолжать выполнение других задач во время ожидания ответа от сервера.
2.	Файловые операции:
Загрузка, сохранение или обработка файлов может быть времезатратной операцией. Асинхронность позволяет избежать блокировки интерфейса пользователя во время выполнения этих операций.
3.	Обработка событий:
Асинхронные методы широко используются в обработке событий в веб-разработке. Например, обработка кликов, отправка форм, и другие события выполняются асинхронно.
4.	Таймеры и интервалы:
Использование таймеров и интервалов для выполнения задач в определенные моменты времени. Асинхронные методы обеспечивают выполнение других операций во время ожидания таймеров.
5.	Параллельное выполнение задач:
Асинхронность позволяет параллельно выполнять несколько задач, улучшая производительность и сокращая время ожидания.
Пример использования асинхронных функций, где ключевое слово await заставит интерпретатор JavaScript ждать до тех пор, пока промис справа от await не выполнится приведен ниже.
 

Google Maps
В своей работе я буду подключать Google Maps. Google Maps — это сервис от Google, предоставляющий картографические данные, маршруты и другую связанную информацию. Он широко используется в веб-разработке для встраивания интерактивных карт в веб-приложения и сайты. Вот основные аспекты Google Maps API и его возможности:
Основные Возможности:
1.	Отображение карт:
Встраивание интерактивных карт на веб-страницы, с возможностью управления масштабированием, перемещением и отображением различных слоев (например, улицы, места). 
2.	Маршруты и навигация:

Построение маршрутов между двумя или более точками, расчет расстояний, времени в пути и отображение навигации.

3.	Места и геокодирование:

Получение информации о местах, поиск мест в определенном районе, а также преобразование адресов в координаты и наоборот.

4.	Дополнительные компоненты:

Использование дополнительных служб, таких как Places API для поиска мест, Street View для просмотра уличных изображений, Elevation API для получения высоты над уровнем моря и других.

Так же Google Maps дает возможность изменять внешний вид карты, устанавливать маркеры, что дает возможность сделать приложение удобным для конечного пользователя.
Реализация компонента с картами представлена ниже 
 
 
Хук created вызывается после того, как экземпляр Vue.js был создан, и все его свойства данных (определенные в data) и методы (определенные в methods) доступны. Однако, в этот момент экземпляр Vue ещё не cмонтирован в DOM. Можно использовать created, чтобы установить начальные значения для данных, осуществить первоначальную загрузку данных из API или других источников, что и сделано в моем коде. Далее так как я использую сторонний сервис необходимо воспользоваться асинхронным методом.
Firebase
Firebase - это облачная платформа, разработанная Google, которая предоставляет разработчикам инструменты для создания приложений. Она позволяет создавать приложения для веб приложений, мобильных устройств и других платформ, предоставляя готовые инструменты для разработки и развертывания приложений без необходимости управления инфраструктурой.
Firebase включает в себя:
•	Firebase Realtime Database: Облачная база данных реального времени.
•	Firebase Authentication: Механизм аутентификации и управления пользователями.
•	Firebase Cloud Messaging: Сервис для отправки уведомлений на устройства пользователей.
•	Firebase Hosting: Облачный хостинг для статического и динамического контента.
•	Другие компоненты (Firebase Analytics, Firebase Functions и т.д.), которые могут быть релевантными для конкретного исследования. 
Для подключение Firebase необходимо установить в проект сам Firebase командой “npm i firebase” и сделать соответствующие импорты в main.js:
 
 
В необходимом компоненте так же нужно импортировать соответствующие модули firebase:
 
На данном примере это компонент аутетинфикации. Авторизация пользователя будет проходить по почте и паролю. Далее необходимо сделать соответствующий обработчик событий. По нажатию на кнопку «Войти» будет обрабатываться событие:
 
Так как мы обращаемся к постороннему сервису метод сделаем асинхронным и пропишем два сценария. Первый успешный и мы перенаправляем пользователя на страницу личного кабинета, и второй, где мы выведем сообщение для пользователя, если что-то пойдет не так.
Так же в самом вызове метода надо отключить превентивную перезагрузку станицы: @submit.prevent="submitHandler".
После регистрации нового пользователя на платформе Firebase этот пользователь появляется в базе данных
 
На странице регистрации и обработку события выхода из личного кабинета технология будет похожая, но там мы будем импортировать соответствующие модули farebase:
Страница регистрации:
import { getAuth, createUserWithEmailAndPassword } from "firebase/auth";
 
Обработка выхода из личного кабинета:
import { getAuth, signOut } from "firebase/auth";

 

Использование Vuex.
В приложениях может быть сложно эффективно управлять обменом данными между компонентами особенно если они находятся в разных частях приложения и не связаны напрямую. В таких сценариях использование стандартных методов передачи данных между компонентами, таких как $emit и props в Vue, может быть неудобным и привести к неструктурированному коду и сложной поддержке.
В таких случаях удобно использовать хранилище данных, которое будет централизованно управлять состоянием приложения. Это хранилище позволяет компонентам получать доступ к данным, необходимым именно им, и устраняет необходимость передавать данные через множество промежуточных компонентов.
Преимущества такого подхода включают:
1. Централизованное хранение данных: Данные выносятся из компонентов и хранятся в едином месте (хранилище), что облегчает управление состоянием приложения.
2. Управление изменениями данных: Хранилище обеспечивает мутации, которые позволяют изменять данные. Это делает возможным обновление данных в разных частях приложения.
3. Реактивность и обновление компонентов: Хранилище в библиотеке Vuex автоматически обеспечивает реактивность данных, что означает, что при изменении данных все компоненты, зависящие от этих данных, автоматически обновляются.
4. Управление состоянием приложения: Хранилище может облегчить отслеживание и управление состоянием приложения, особенно в сложных приложениях с множеством компонентов.
Vuex - это библиотека управления состоянием приложения. 
Основные понятия Vuex включают в себя:
Состояние (State): Этот объект представляет собой единый источник данных для всего приложения. Состояние доступно из любого компонента в приложении. Обычно состояние в Vuex описывается в виде объекта, содержащего различные свойства и значения, представляющие текущее состояние приложения.
Мутации (Mutations): Мутации - это синхронные функции, предназначенные для изменения состояния. Они являются единственным способом изменения данных в хранилище. Мутации принимают текущее состояние и параметры, которые необходимо изменить, и вносят изменения в состояние.
Действия (Actions): Действия используются для выполнения асинхронных операций или сложной бизнес-логики перед изменением состояния через мутации. Действия запускаются из компонентов и могут содержать логику, такую как обработка сетевых запросов.
Геттеры (Getters): Геттеры используются для получения данных из состояния в хранилище. Они предоставляют вычисляемые значения, которые можно использовать в компонентах.

Для установки данного приложения используем команду “npm install vuex”, в некоторых случаях, возможно понадобится указать версию, например “npm install vuex@3”. Далее в папке src создаем папку store и в ней файл index.js, там и будет хранится состояние нашего приложения. Далее не забываем подключить данный файл в main.js.
При входе и выходе из личного кабинета будем менять состояние приложения. 
Изначально состояние нашего приложения выглядит так:

 

Пользователь не авторизован и userID представляет из себя пустую строку. Изменение состояния можно сделать напрямую в методе, например:
this.$store.state.auth = true. 
Но, как уже сказано, лучше это делать через mutation, на скриншоте выше видно как это сделано в моем приложении.
Вызвать mutation в компоненте можно несколькими способами.
1.	commit:
Простой и явный способ вызвать мутацию.
Подходит для случаев, когда требуется явное указание хранилища и мутации.
Позволяет более гибко управлять параметрами и логикой вызова мутаций.
В моем приложении это выглядело бы так:
this.$store.commit('IS_AUTH', true);
2.	...mapMutations:
Удобный способ создать методы компонента, которые автоматически вызывают мутации.
Полезен, если нужно вызывать несколько мутаций в компоненте.
Может сделать код компактнее и более читаемым, особенно в компонентах с большим количеством мутаций.
Пример использования ...mapMutations:
Необходимо сделать соответствующий импорт
import { mapMutations } from 'vuex';
 
Закончить выход из ЛК, сделать, чтобы нельзя было обратно зайти, не вводя пароль



Сделать если уже вошел в ЛК, а потом открываешь другую вкладку при входе в ЛК опять надо вводить пароль

















Сделать!:
1.	ЛК,
2.	Подключить БД
3.	API: гугл карты, погода
4.	Возможность онлайн записи
4.1	подключение к crm
4.2	 автоматическая отправка письма или сообщения о записи
4.3	Автоматическое напоминание о записи за сутки


Изображения взяты из источника:
<a href="https://www.freepik.com/free-vector/set-teeth-treatment-hygiene-with-prosthesis_5686262.htm#query=svg%20illustration%20tooth&position=14&from_view=search&track=ais">Image by studiogstock</a> on Freepik
